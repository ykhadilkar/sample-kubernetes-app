# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - ACR_RESOURCE_GROUP (resource group of your ACR)
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - CLUSTER_RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#    - DOCKER_FILE (path to your Dockerfile)
#    - BUILD_CONTEXT_PATH (path to the context of your Dockerfile)
#    - NAMESPACE (namespace to deploy your application)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: azure-gov-aks-deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  environment: AzureUSGovernment
  ACR_RESOURCE_GROUP: saunders-test
  AZURE_CONTAINER_REGISTRY: yatin
  CONTAINER_NAME: sample-kubernetes-app
  CLUSTER_RESOURCE_GROUP: saunders-test
  CLUSTER_NAME: saundersaks
  DEPLOYMENT_MANIFEST_PATH: |
    temp-k8s/manifests/deployment.yaml
    temp-k8s/manifests/service.yaml
  DOCKER_FILE: ./Dockerfile
  BUILD_CONTEXT_PATH: ./
  NAMESPACE: yatin
  SCAN_PATH: "." # Set the relative path in the repo to build the image from
  #TAG: yatin.azurecr.io/samples/wiz-sample-app # Set the tag to use for the image
  POLICY: "Default vulnerabilities policy" # Set the desired Wiz CLI policy to use

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3
        
      - name: ACR build
        id: build-push-acr
        uses: azure/acr-build@v1
        with:
          service_principal: ${{ secrets.service_principal }}
          service_principal_password: ${{ secrets.service_principal_password }}
          tenant: ${{ secrets.tenant }}
          registry: ${{ secrets.registry }}
          repository: ${{ secrets.repository }}
          image:  ${{ env.CONTAINER_NAME }}
          branch: main
          tag: ${{ github.sha }}

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: AzureUSGovernment
   
      - name: Download Wiz CLI
        run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli
  
      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_4_GOV_CLIENT_ID" --secret "$WIZ_4_GOV_CLIENT_SECRET"
        env:
          WIZ_4_GOV_CLIENT_ID: ${{ secrets.WIZ_4_GOV_CLIENT_ID }}
          WIZ_4_GOV_CLIENT_SECRET: ${{ secrets.WIZ_4_GOV_CLIENT_SECRET }}
          WIZ_ENV: fedramp

      - name: Run wiz-cli docker image scan
        id: scan
        run: |-
          sudo -E ./wizcli docker scan -i ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --policy-hits-only --driver mountWithLayers \
          --dockerfile "./Dockerfile" --output wiz-output.json,sarif,true --tag github_action_run_id=${{ github.run_id }} \
          --sbom-format spdx-json --sbom-output-file sbom.json
        env:
          WIZ_ENV: fedramp
        continue-on-error: true
  
  deploy:
    runs-on: ubuntu-latest
    steps:
     - name: Set AKS context
       id: set-context
       uses: azure/aks-set-context@v3
       with:
         resource-group: '${{ secrets.resource_group }}' 
         cluster-name: '${{ secrets.cluster_name }}'
     - name: Setup kubectl
       id: install-kubectl
       uses: azure/setup-kubectl@v3
     - name: Deploy to AKS
       id: deploy-aks
       uses: Azure/k8s-deploy@v4
       with:
         namespace: 'yatin'
         manifests: |
           azure-vote-all-in-one-redis.yaml
           images: '${{ secrets.registry }}.azurecr.io/${{ secrets.repository }}/azure-vote-front:${{ github.sha }}'
           pull-images: false 
